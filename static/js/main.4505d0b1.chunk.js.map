{"version":3,"sources":["components/Contacts/Contacts.module.css","App.module.css","components/Filter/Filter.module.css","components/Form/Form.module.css","components/api.js","redux/operations.js","redux/selectors.js","redux/actions.js","redux/reducers.js","components/Form/Form.js","components/Contacts/Contacts.js","App.js","redux/store.js","index.js"],"names":["module","exports","axios","defaults","baseURL","deleteContact","contactId","delete","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","then","response","data","contacts","addContact","text","value","post","api","getContacts","state","items","createAction","createReducer","fulfilled","payload","action","filter","contact","id","isLoading","pending","rejected","error","rootReducer","combineReducers","Form","props","useState","name","setName","number","setNumber","disabled","setDisabled","useSelector","dispatch","useDispatch","handleInputChange","event","currentTarget","resetForm","onSubmit","preventDefault","newContact","shortid","generate","operations","className","styles","form","labelForm","type","onChange","onBlur","find","toLowerCase","alert","inputForm","pattern","title","required","formBtn","Contacts","selectors","useEffect","contactsList","map","contactItem","contactTel","onClick","button","App","container","phonebook","titleContacts","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4505d0b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"Contacts_contactsList__HXS4c\",\"contactItem\":\"Contacts_contactItem__2BZLH\",\"contactTel\":\"Contacts_contactTel__1AvP_\",\"button\":\"Contacts_button__j4pjc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__19vsP\",\"title\":\"App_title__2eDpF\",\"titleContacts\":\"App_titleContacts__2P8Hb\",\"phonebook\":\"App_phonebook__2b1aL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findLabel\":\"Filter_findLabel__1ez3v\",\"inputForm\":\"Filter_inputForm__3Zlo1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__1ue-u\",\"labelForm\":\"Form_labelForm__3t014\",\"inputForm\":\"Form_inputForm__1TROg\",\"formBtn\":\"Form_formBtn__7ZRqc\"};","import axios from 'axios';\r\n\r\n\r\naxios.defaults.baseURL = 'https://618bb148ded7fb0017bb915f.mockapi.io';\r\n\r\nexport const fetchContacts = () => {\r\n    return axios.get('/contacts').then(response => response.data);\r\n};\r\n\r\nexport const addContact = value => {\r\n    return axios.post('/contacts', value).then(({ data }) => data);\r\n};\r\n\r\nexport const deleteContact = contactId => {\r\n    axios.delete(`/contacts/${contactId}`);\r\n    return contactId;\r\n};\r\n\r\nexport const updateContact = (contactId, update) => {\r\n    return axios.patch(`/todos/${contactId}`, update).then(({ data }) => data);\r\n};\r\n\r\n\r\n","import { createAsyncThunk } from '@reduxjs/toolkit'\r\nimport * as api from '../components/api';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n\r\n\r\n\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n    'contacts/fetchContacts',\r\n    async (_, { rejectWithValue }) => {\r\n        try {\r\n            const contacts = await api.fetchContacts();\r\n            return contacts;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    }\r\n)\r\n\r\n\r\nexport const addContact = createAsyncThunk(\r\n    'contacts/addContact',\r\n    async (text, { rejectWithValue }) => {\r\n        try {\r\n            const contacts = await api.addContact(text);\r\n            return contacts;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    }\r\n)\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n\r\n    'contacts/deleteContact',\r\n\r\n    async (contactId, { rejectWithValue }) => {\r\n        try {\r\n            const contacts = await api.deleteContact(contactId);\r\n            // const dispatch = useDispatch()\r\n            // dispatch(fetchContacts())\r\n            return contacts;\r\n        } catch (error) {\r\n            return rejectWithValue(error);\r\n        }\r\n    }\r\n\r\n)\r\n\r\n// export const fetchContactsOpration = () => async dispatch => {\r\n//     dispatch(actions.fetchContactsRequest());\r\n\r\n//     try {\r\n//         const contacts = await api.fetchContacts();\r\n//         dispatch(actions.fetchContactsSuccess(contacts));\r\n\r\n//     } catch (error) {\r\n//         dispatch(actions.fetchContactsError(error))\r\n//     }\r\n// }\r\n\r\n// export const addContactsOpration = () => async dispatch => {\r\n//     dispatch(actions.addContactRequest());\r\n\r\n//     try {\r\n//         const contact = await api.addContact();\r\n//         dispatch(actions.addContactSuccess(contact));\r\n\r\n//     } catch (error) {\r\n//         dispatch(actions.addContactError(error))\r\n//     }\r\n// }","export const getContacts = state => state.items;\r\n\r\n\r\n\r\n// export const visibleContacts = ({ items, filter }) => {\r\n//     return items.filter(contact =>\r\n//         contact.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\r\n//     );\r\n// };\r\n\r\n\r\n\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n//pending\r\n// export const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\n// //fulfilled\r\n// export const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\n// //rejected\r\n// export const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\n\r\n\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n// export const deleteContact = createAction('contacts/deleteContact');\r\n// export const filterContact = createAction('contacts/filterContact');\r\n// export const resetFilter = createAction('filter/resetFilter')\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////\r\n// import { ADD_CONTACT, DELETE_CONTACT, FILTER_CONTACT } from './types';\r\n\r\n// export const addContact = (data) => ({\r\n//     type: ADD_CONTACT,\r\n//     payload: FormData\r\n// })\r\n\r\n// export const deleteContact = (id) => ({\r\n//     type: DELETE_CONTACT,\r\n//     payload: id\r\n// })\r\n\r\n// export const filterContact = (value) => ({\r\n//     type: FILTER_CONTACT,\r\n//     payload: value\r\n// })\r\n\r\n\r\n\r\n","import { combineReducers, createReducer } from \"@reduxjs/toolkit\";\r\nimport { fetchContacts, addContact, deleteContact } from \"./operations\"\r\n\r\nconst items = createReducer([], {\r\n    [fetchContacts.fulfilled]: (_, { payload }) => payload,\r\n    [addContact.fulfilled]: (state, action) => [...state, action.payload],\r\n    [deleteContact.fulfilled]: (state, action) => state.filter((contact) => contact.id !== action.payload),\r\n});\r\n\r\n\r\n\r\nconst isLoading = createReducer(false, {\r\n    [fetchContacts.pending]: () => true,\r\n    [fetchContacts.fulfilled]: () => false,\r\n    [fetchContacts.rejected]: () => false,\r\n\r\n    [addContact.pending]: () => true,\r\n    [addContact.fulfilled]: () => false,\r\n    [addContact.rejected]: () => false,\r\n\r\n    [deleteContact.pending]: () => true,\r\n    [deleteContact.fulfilled]: () => false,\r\n    [deleteContact.rejected]: () => false,\r\n})\r\n\r\n\r\nconst error = createReducer(null, {\r\n    [fetchContacts.rejected]: (_, action) => action.payload,\r\n    [fetchContacts.pending]: () => null,\r\n})\r\n\r\n// const filter = createReducer('', {\r\n//     [actions.filterContact]: (state, action) => action.payload,\r\n//     [actions.resetFilter]: (state, action) => state = '',\r\n\r\n// });\r\n\r\nconst rootReducer = combineReducers({\r\n    items,\r\n    // filter,\r\n    isLoading,\r\n    error,\r\n})\r\n\r\nexport default rootReducer;\r\n\r\n","import { useState } from \"react\";\r\nimport styles from './Form.module.css';\r\n// import { addContact, addContactRequest, addContactSuccess } from \"../../redux/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { visibleContacts } from '../../redux/selectors';\r\n\r\nimport { operations } from '../../redux';\r\n// import * as operations from '../../redux/operations';\r\n\r\nimport shortid from 'shortid';\r\n\r\n\r\n\r\n\r\nexport default function Form(props) {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const [disabled, setDisabled] = useState(false);\r\n\r\n    // const contacts = useSelector(visibleContacts)\r\n    const contacts = useSelector(state => state.items);\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleInputChange = event => {\r\n        // console.log(event.currentTarget.value);\r\n        const { name, value } = event.currentTarget;\r\n        setDisabled(false);\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newContact = {\r\n            id: shortid.generate(),\r\n            name: name,\r\n            number: number\r\n        }\r\n\r\n        dispatch(operations.addContact(newContact));\r\n        resetForm();\r\n    }\r\n\r\n    const resetForm = () => {\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n    const findNameInContact = (event) => {\r\n        if (contacts.find((contact) =>\r\n            contact.name.toLowerCase() === event.currentTarget.value.toLowerCase()\r\n        )) {\r\n            setDisabled(true)\r\n            alert(`${event.currentTarget.value} is already in contacts.`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form\r\n            onSubmit={handleSubmit}\r\n            className={styles.form} >\r\n            <label className={styles.labelForm}>\r\n                Name\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleInputChange}\r\n                    onBlur={findNameInContact}\r\n                    className={styles.inputForm}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                />\r\n            </label>\r\n            <label className={styles.labelForm}>\r\n                Number\r\n                <input\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    value={number}\r\n                    onChange={handleInputChange}\r\n                    disabled={disabled}\r\n                    className={styles.inputForm}\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                />\r\n\r\n            </label>\r\n            <button\r\n                type=\"submit\"\r\n                disabled={disabled}\r\n                className={styles.formBtn}\r\n            >Add contact</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\nimport styles from './Contacts.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { operations, selectors } from '../../redux';\r\n\r\n\r\n// import * as operations from '../../redux/operations'\r\n// import * as selectors from '../../redux/selectors'\r\n\r\nfunction Contacts() {\r\n    const contacts = useSelector(selectors.getContacts);\r\n    //const contacts = useSelector(state => state.items);\r\n\r\n    // const filter = useSelector(state => state.filter);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(operations.fetchContacts())\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <ul className={styles.contactsList}>\r\n            {contacts.map(({ name, number, id }) => (\r\n                <li key={id}\r\n                    className={styles.contactItem}>\r\n                    {name}:\r\n                    <span className={styles.contactTel}>{number}</span>\r\n                    <button onClick={() => dispatch(operations.deleteContact(id))} className={styles.button}>Delete</button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Contacts;\r\n//////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n// import React from 'react';\r\n// import styles from './Contacts.module.css';\r\n// import { useSelector, useDispatch } from 'react-redux'\r\n// import { deleteContact } from '../../redux/actions';\r\n// import { visibleContacts } from '../../redux/selectors'\r\n\r\n\r\n// function Contacts() {\r\n//     // const contacts = useSelector(visibleContacts);\r\n\r\n//     const contacts = useSelector(state => state.contacts)\r\n//     const value = useSelector(state => state.filter)\r\n//     const dispatch = useDispatch();\r\n\r\n//     const visibleContacts = (contacts, filter) => {\r\n//         return contacts.filter(contact =>\r\n//             contact.name.toLowerCase().includes(filter.toLowerCase())\r\n//         );\r\n//     };\r\n\r\n//     return (\r\n//         <ul className={styles.contactsList}>\r\n//             {visibleContacts(contacts, value).map(({ name, number, id }) => (\r\n//                 <li key={id}\r\n//                     className={styles.contactItem}>\r\n//                     {name}:\r\n//                     <span className={styles.contactTel}>{number}</span>\r\n//                     <button onClick={() => dispatch(deleteContact(id))} className={styles.button}>Delete</button>\r\n//                 </li>\r\n//             ))}\r\n//         </ul>\r\n//     );\r\n// }\r\n\r\n// export default Contacts;\r\n","import Form from './components/Form';\r\nimport Contacts from './components/Contacts';\r\nimport Filter from \"./components/Filter\";\r\nimport styles from './App.module.css';\r\n\r\nexport default function App() {\r\n  // fetchContacts()\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.container}>\r\n        <div className={styles.phonebook}>\r\n          <h1 className={styles.title}>Phonebook</h1>\r\n          <Form />\r\n\r\n          <h2 className={styles.titleContacts}>Contacts</h2>\r\n          {/* <Filter /> */}\r\n          <Contacts />\r\n\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"./reducers\";\r\nimport {\r\n    // persistStore,\r\n    // persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\n// const persistConfig = {\r\n//     key: 'contacts',\r\n//     storage,\r\n// }\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n        },\r\n    }),\r\n    devTools: process.env.NODE_ENV === 'development'\r\n});\r\n\r\n// const persistor = persistStore(store)\r\n// const obj = { store, persistor }\r\n// export default obj;\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store.js'\r\n// import { PersistGate } from 'redux-persist/integration/react'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={data.persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider >\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}